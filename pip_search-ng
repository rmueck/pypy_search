#!/usr/bin/env python3
"""
Reliable PyPI package search combining original logic with rich display.
"""
import requests
import sys
import json
from urllib.parse import quote
import argparse
from typing import List, Dict, Any
import re
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

def search_exact_match(package_name: str) -> Dict[str, Any]:
    """Search for exact package match using PyPI JSON API"""
    try:
        url = f"https://pypi.org/pypi/{package_name}/json"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.json()
        return None
    except requests.RequestException:
        return None

def search_similar_packages(query: str) -> List[str]:
    """
    Search for packages with similar names using PyPI simple index.
    This method is more reliable for finding similar packages than scraping
    the main search page, despite being less efficient.
    """
    try:
        response = requests.get("https://pypi.org/simple/", timeout=15)
        if response.status_code == 200:
            content = response.text.lower()
            query_lower = query.lower()

            # This regex is specifically for the PyPI simple index format
            pattern = r'<a href="[^"]*">' + re.escape(query_lower) + r'[^"]*</a>'
            matches = re.findall(pattern, content)

            packages = []
            for match in matches:
                # Extract the package name from the link
                package_name = match.split('>')[-2].split('<')[0]
                packages.append(package_name)

            unique_packages = list(set(packages))
            return unique_packages
    except requests.RequestException:
        pass
    return []

def display_package_info(package_data: Dict[str, Any], console: Console):
    """Display formatted package information in a rich Panel."""
    info = package_data['info']

    panel_content = (
        f"[bold cyan]Version:[/bold cyan] {info.get('version', 'N/A')}\n"
        f"[bold yellow]Summary:[/bold yellow] {info.get('summary', 'No summary available')}\n"
        f"[bold green]Author:[/bold green] {info.get('author', 'Unknown')}\n"
        f"[bold blue]License:[/bold blue] {info.get('license', 'Not specified')}\n"
        f"[bold magenta]Homepage:[/bold magenta] {info.get('home_page', 'N/A')}\n"
        f"[bold red]Install:[/bold red] pip install {info['name']}"
    )

    console.print(Panel(
        panel_content,
        title=f"üì¶ [bold]{info['name']}[/bold]",
        border_style="bold green"
    ))

def main():
    parser = argparse.ArgumentParser(description='Search PyPI packages')
    parser.add_argument('query', help='Package name or search term')
    parser.add_argument('-l', '--limit', type=int, default=10, help='Maximum number of similar results to show (default: 10, use 0 for no limit)')
    args = parser.parse_args()

    console = Console()
    query = args.query.strip()
    limit = None if args.limit == 0 else args.limit

    if not query:
        console.print("[bold red]Please provide a search term[/bold red]")
        sys.exit(1)

    console.print(f"üîç [bold blue]Searching for packages related to: {query}[/bold blue]")

    # 1. Try to find an exact match first
    exact_match = None
    with console.status(f"[bold green]Checking for exact match...[/bold green]", spinner="dots"):
        exact_match = search_exact_match(query)

    if exact_match:
        console.print("\n‚úÖ [bold green]Exact match found:[/bold green]")
        display_package_info(exact_match, console)

    # 2. Search for similar packages
    similar_names = []
    with console.status(f"[bold green]Searching for similar packages...[/bold green]", spinner="dots"):
        similar_names = search_similar_packages(query)

    # Filter out the exact match to avoid duplication
    if exact_match and exact_match['info']['name'] in similar_names:
        similar_names.remove(exact_match['info']['name'])

    if similar_names:
        if limit and len(similar_names) > limit:
            console.print(f"\nüìã [bold]Showing {limit} of {len(similar_names)} similar packages (use -l 0 for all results):[/bold]")
            similar_names = similar_names[:limit]
        else:
            console.print(f"\nüìã [bold]Found {len(similar_names)} similar packages:[/bold]")

        table = Table(title=f"Similar Packages for '{query}'", show_header=True, header_style="bold magenta")
        table.add_column("Package", style="bold green")
        table.add_column("Version", style="cyan")
        table.add_column("Summary", style="yellow")

        # Fetch details for similar packages
        for name in similar_names:
            package = search_exact_match(name)
            if package:
                info = package['info']
                table.add_row(
                    info.get('name', 'N/A'),
                    info.get('version', 'N/A'),
                    info.get('summary', 'No summary available')
                )

        console.print(table)

    if not exact_match and not similar_names:
        console.print(f"\n[bold red]‚ùå No packages found matching '{query}'[/bold red]")
        console.print(f"\nüí° Try searching on PyPI web interface: [link=https://pypi.org/search/?q={quote(query)}]https://pypi.org/search/?q={quote(query)}[/link]")
        sys.exit(1)

    sys.exit(0)

if __name__ == "__main__":
    main()


