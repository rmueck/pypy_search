#!/usr/bin/env python3
"""
Reliable PyPI package search combining original logic with rich display.
This version guarantees a uniform width for the exact match panel and the
similar packages table by manually calculating the required width.
"""
import requests
import sys
import json
from urllib.parse import quote
import argparse
from typing import List, Dict, Any
import re
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box

def search_exact_match(package_name: str) -> Dict[str, Any]:
    """Search for exact package match using PyPI JSON API"""
    try:
        url = f"https://pypi.org/pypi/{package_name}/json"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.json()
        return None
    except requests.RequestException:
        return None

def search_similar_packages(query: str) -> List[str]:
    """
    Search for packages with similar names using PyPI simple index.
    This method is more reliable for finding similar packages than scraping
    the main search page, despite being less efficient.
    """
    try:
        response = requests.get("https://pypi.org/simple/", timeout=15)
        if response.status_code == 200:
            content = response.text.lower()
            query_lower = query.lower()

            pattern = r'<a href="[^"]*">' + re.escape(query_lower) + r'[^"]*</a>'
            matches = re.findall(pattern, content)

            packages = []
            for match in matches:
                package_name = match.split('>')[-2].split('<')[0]
                packages.append(package_name)

            unique_packages = list(set(packages))
            return unique_packages
    except requests.RequestException:
        pass
    return []

def main():
    parser = argparse.ArgumentParser(description='Search PyPI packages')
    parser.add_argument('query', help='Package name or search term')
    parser.add_argument('-l', '--limit', type=int, default=10, help='Maximum number of similar results to show (default: 10, use 0 for no limit)')
    args = parser.parse_args()

    console = Console()
    query = args.query.strip()
    limit = None if args.limit == 0 else args.limit

    if not query:
        console.print("[bold red]Please provide a search term[/bold red]")
        sys.exit(1)

    console.print(f"üîç [bold blue]Searching for packages related to: {query}[/bold blue]")

    # 1. Fetch all data first
    exact_match = None
    similar_packages_data = []

    with console.status(f"[bold green]Fetching data...[/bold green]", spinner="dots"):
        exact_match = search_exact_match(query)
        similar_names = search_similar_packages(query)

        # Filter out the exact match to avoid duplication
        if exact_match and exact_match['info']['name'] in similar_names:
            similar_names.remove(exact_match['info']['name'])

        for name in similar_names[:limit]:
            package_info = search_exact_match(name)
            if package_info:
                similar_packages_data.append(package_info)

    # 2. Manually calculate the width of the table based on content
    max_package_len = 0
    max_version_len = 0
    max_summary_len = 0

    # Get max lengths from similar packages
    for package in similar_packages_data:
        info = package['info']
        max_package_len = max(max_package_len, len(info.get('name', 'N/A')))
        max_version_len = max(max_version_len, len(info.get('version', 'N/A')))
        max_summary_len = max(max_summary_len, len(info.get('summary', '')))

    # Get max lengths from the exact match
    if exact_match:
        info = exact_match['info']
        max_package_len = max(max_package_len, len(info.get('name', 'N/A')))
        max_version_len = max(max_version_len, len(info.get('version', 'N/A')))

    # Add header lengths to the calculation
    max_package_len = max(max_package_len, len("Package"))
    max_version_len = max(max_version_len, len("Version"))
    max_summary_len = max(max_summary_len, len("Summary"))

    # Calculate the total width, including padding and borders
    table_width = (
        max_package_len + max_version_len +
        min(max_summary_len, console.width - max_package_len - max_version_len - 10) +
        6 # for padding and borders
    )
    # Ensure the width doesn't exceed the console width
    total_width = min(table_width, console.width)

    # 3. Display the exact match with the calculated width
    if exact_match:
        console.print("\n‚úÖ [bold green]Exact match found:[/bold green]")

        info = exact_match['info']
        panel_content = (
            f"[bold cyan]Version:[/bold cyan] {info.get('version', 'N/A')}\n"
            f"[bold yellow]Summary:[/bold yellow] {info.get('summary', 'No summary available')}\n"
            f"[bold green]Author:[/bold green] {info.get('author', 'Unknown')}\n"
            f"[bold blue]License:[/bold blue] {info.get('license', 'Not specified')}\n"
            f"[bold magenta]Homepage:[/bold magenta] {info.get('home_page', 'N/A')}\n"
            f"[bold red]Install:[/bold red] pip install {info['name']}"
        )

        console.print(Panel(
            panel_content,
            title=f"üì¶ [bold]{info['name']}[/bold]",
            border_style="bold green",
            width=total_width,
            box=box.ROUNDED
        ))

    # 4. Display the similar packages table
    if similar_packages_data:
        if limit and len(similar_packages_data) > limit:
            console.print(f"\nüìã [bold]Showing {limit} of {len(similar_packages_data)} similar packages (use -l 0 for all results):[/bold]")
        else:
            console.print(f"\nüìã [bold]Found {len(similar_packages_data)} similar packages:[/bold]")

        table = Table(
            title=f"Similar Packages for '{query}'",
            show_header=True,
            header_style="bold magenta",
            box=box.ROUNDED,
            width=total_width
        )
        table.add_column("Package", style="bold green", width=max_package_len)
        table.add_column("Version", style="cyan", width=max_version_len)
        table.add_column("Summary", style="yellow")

        for package in similar_packages_data:
            info = package['info']
            table.add_row(
                info.get('name', 'N/A'),
                info.get('version', 'N/A'),
                info.get('summary', 'No summary available')
            )

        console.print(table)

    if not exact_match and not similar_packages_data:
        console.print(f"\n[bold red]‚ùå No packages found matching '{query}'[/bold red]")
        console.print(f"\nüí° Try searching on PyPI web interface: [link=https://pypi.org/search/?q={quote(query)}]https://pypi.org/search/?q={quote(query)}[/link]")
        sys.exit(1)

    sys.exit(0)

if __name__ == "__main__":
    main()

